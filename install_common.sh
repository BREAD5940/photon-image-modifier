#!/bin/bash -v

# Verbose and exit on errors
set -ex

# Do additional tasks that are common across all images, 
# but not suitable for inclusion in install.sh
echo "Running install_common.sh"

# Limit the maximum length of systemd-journald logs
mkdir -p /etc/systemd/journald.conf.d
cat > /etc/systemd/journald.conf.d/60-limit-log-size.conf <<EOF
# Added by Photonvision to keep the logs to a reasonable size
[Journal]
SystemMaxUse=100M
EOF

# Add a helpful message to the logon screen
# ASCII Art generated by: https://www.asciiart.eu/image-to-ascii
cp -f ./files/issue.txt /etc/issue
cp -f /etc/issue /etc/issue.net
sed -i 's/#Banner none/Banner \/etc\/issue.net/g' /etc/ssh/sshd_config



# INSTALL REAL

# pyenv deps
apt-get update -y 
apt-get install -y make build-essential libssl-dev zlib1g-dev \
    libbz2-dev libreadline-dev libsqlite3-dev wget curl llvm \
    xz-utils tk-dev libffi-dev \
    liblzma-dev python3-openssl git

# apt-get install -y libncurses5-dev libncursesw5-dev 

# Install pyenv
echo "Installing pyenv..."
curl https://pyenv.run | bash

# Add pyenv to shell startup scripts
echo -e '\n# Pyenv configuration' >> ~/.bashrc
echo 'export PYENV_ROOT="$HOME/.pyenv"' >> ~/.bashrc
echo 'export PATH="$PYENV_ROOT/bin:$PATH"' >> ~/.bashrc
echo -e 'eval "$(pyenv init --path)"\neval "$(pyenv init -)"' >> ~/.bashrc

# Source bashrc to apply pyenv changes in the current shell
export PYENV_ROOT="$HOME/.pyenv"
export PATH="$PYENV_ROOT/bin:$PATH"
eval "$(pyenv init --path)"
eval "$(pyenv init -)"

pyenv install 3.11
pyenv global 3.11

# Confirm installation
python --version

# real deps
apt-get --yes install libssl-dev libusb-1.0-0-dev libudev-dev pkg-config libgtk-3-dev
apt-get --yes install git wget cmake build-essential
apt-get --yes install libglfw3-dev libgl1-mesa-dev libglu1-mesa-dev at

cd ~
git clone --depth 1 --branch v2.56.3 https://github.com/IntelRealSense/librealsense.git

cd librealsense
./scripts/setup_udev_rules.sh

mkdir build && cd build
cmake ../ -DBUILD_EXAMPLES=true -DFORCE_RSUSB_BACKEND=true -DPYTHON_EXECUTABLE=$(which python3) -DBUILD_PYTHON_BINDINGS=true -DBUILD_GRAPHICAL_EXAMPLES=true -DCMAKE_BUILD_TYPE=Release
make -j2
make install

#done with real

# install ntcore
cd ~
git clone --branch 2025.2.1 https://github.com/robotpy/mostrobotpy
cd mostrobotpy

pip install -r rdev_requirements.txt
pip install numpy

# get rid of everything after pyntcore
python -c '(path:=__import__("pathlib").Path("./rdev.toml")).write_text((re:=__import__("re")).match(r"^.*pyntcore.*?(?=\[)",path.read_text(),re.DOTALL)[0])'
./rdev.sh ci run

# nice to haves
pip install numpy scipy opencv-python tqdm flask requests pytest

# exploring
pip install streamlit pandas black pillow

apt-get install ffmpeg